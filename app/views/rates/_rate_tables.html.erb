<div class="bg-white rounded-2xl shadow-sm border border-gray-100 p-8">
  <% if @shipping_option %>
    <div class="flex items-center justify-between mb-6">
      <div>
        <h2 class="text-2xl font-bold text-gray-900 mb-2">Rate Tables for <%= @shipping_option.name %></h2>
        <p class="text-gray-600">Manage pricing rules for different regions and weight ranges</p>
      </div>
      <div class="flex items-center gap-2">
        <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
          <div class="w-2 h-2 bg-green-500 rounded-full mr-2"></div>
          <%= @shipping_option.status.capitalize %>
        </span>
      </div>
    </div>
  <% else %>
    <div class="flex items-center justify-between mb-8">
      <div>
        <h2 class="text-2xl font-bold text-gray-900 mb-2">Rate Tables</h2>
        <p class="text-gray-600">Configure pricing for different shipping methods and regions</p>
      </div>
      <% if @shipping_options.any? %>
        <button id="addRateBtn" class="inline-flex items-center px-6 py-3 bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 !text-white font-medium rounded-xl shadow-lg hover:shadow-xl transition-all duration-200 transform hover:scale-105">
          Add Rate Table
        </button>
      <% end %>
    </div>
  <% end %>

  <% unless @shipping_option %>
    <div class="overflow-x-auto">
      <% if @shipping_options.any? && @shipping_options.joins(:rates).any? %>
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Shipping Method</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Country</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Region</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Weight Range</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Flat Rate</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Min Charge</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            <% @shipping_options.includes(:rates).each do |shipping_option| %>
              <% shipping_option.rates.each do |rate| %>
                <tr class="hover:bg-gray-50">
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="flex items-center">
                      <div class="w-8 h-8 bg-blue-500 rounded-lg flex items-center justify-center mr-3">
                        <i class="fa-solid fa-truck text-white text-sm"></i>
                      </div>
                      <div>
                        <div class="text-sm font-medium text-gray-900"><%= shipping_option.name %></div>
                        <div class="text-sm text-gray-500"><%= shipping_option.countries.join(', ') %></div>
                      </div>
                    </div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    <%= rate.country %>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    <%= rate.region.present? ? rate.region : "-" %>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    <%= rate.weight_range %>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-blue-600">
                    $<%= number_with_precision(rate.flat_rate, precision: 2) %>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-green-600">
                    $<%= number_with_precision(rate.min_charge, precision: 2) %>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <button class="edit-rate-btn text-blue-600 hover:text-blue-900 mr-3" 
                            data-rate-id="<%= rate.id %>"
                            data-rate-country="<%= rate.country %>"
                            data-rate-region="<%= rate.region %>"
                            data-rate-min-weight="<%= rate.min_range_lbs %>"
                            data-rate-max-weight="<%= rate.max_range_lbs %>"
                            data-rate-flat-rate="<%= rate.flat_rate %>"
                            data-rate-min-charge="<%= rate.min_charge %>"
                            data-shipping-option-id="<%= rate.shipping_option_id %>"
                            data-shipping-option-name="<%= rate.shipping_option.name %>">
                      Edit
                    </button>
                    <button class="delete-rate-btn text-red-600 hover:text-red-900" 
                            style: "color: #dc2626 !important;"
                            data-rate-id="<%= rate.id %>"
                            data-rate-country="<%= rate.country %>"
                            data-rate-region="<%= rate.region %>"
                            data-shipping-option-name="<%= rate.shipping_option.name %>"
                            data-delete-url="<%= rate_table_path(rate) %>">
                      Delete
                    </button>
                  </td>
                </tr>
              <% end %>
            <% end %>
          </tbody>
        </table>
      <% else %>
        <div class="text-center py-12">
          <div class="mx-auto h-12 w-12 text-gray-400">
            <i class="fa-solid fa-table text-4xl"></i>
          </div>
          <h3 class="mt-2 text-sm font-medium text-gray-900">No rate tables found</h3>
          <p class="mt-1 text-sm text-gray-500">Create shipping methods and add rate tables to get started.</p>
          <div class="mt-6">
            <% if @shipping_options.any? %>
              <button id="addRateBtnEmpty" class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md !text-white !bg-blue-600 hover:!bg-blue-700 transition-colors duration-200">
                Add Rate Table
              </button>
            <% else %>
              <%= link_to shipping_methods_shipping_options_path, class: "inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-violet-600 hover:bg-violet-700 transition-colors duration-200" do %>
                Create Shipping Method
              <% end %>
            <% end %>
          </div>
        </div>
      <% end %>
    </div>
  <% end %>
</div>

<div id="addRateModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50" data-turbo-permanent>
  <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
    <div class="mt-3">
      <div class="flex items-center justify-between mb-4">
        <h3 class="text-lg font-medium text-gray-900">Add New Rate Table</h3>
        <button id="closeRateModal" class="text-gray-400 hover:text-gray-600">
          <i class="fa-solid fa-times text-xl"></i>
        </button>
      </div>
      
      <form id="addRateForm" class="space-y-4">
        <div>
          <label for="rateShippingMethod" class="block text-sm font-medium text-gray-700 mb-1">Shipping Method</label>
          <select id="rateShippingMethod" name="rate[shipping_option_id]" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" required>
            <option value="">Select a shipping method</option>
            <% @shipping_options.each do |shipping_option| %>
              <option value="<%= shipping_option.id %>"><%= shipping_option.name %></option>
            <% end %>
          </select>
        </div>

        <div>
          <label for="rateCountry" class="block text-sm font-medium text-gray-700 mb-1">Country</label>
          <select id="rateCountry" name="rate[country]" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" required>
            <option value="">Select a country...</option>
          </select>
        </div>

        <div>
          <label for="rateRegion" class="block text-sm font-medium text-gray-700 mb-1">Region</label>
          <select id="rateRegion" name="rate[region]" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
            <option value="">Select a region...</option>
          </select>
        </div>

        <div>
          <label for="rateMinWeight" class="block text-sm font-medium text-gray-700 mb-1">Minimum Weight (lbs)</label>
          <input type="number" id="rateMinWeight" name="rate[min_range_lbs]" step="0.1" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="0.1" required>
        </div>

        <div>
          <label for="rateMaxWeight" class="block text-sm font-medium text-gray-700 mb-1">Maximum Weight (lbs)</label>
          <input type="number" id="rateMaxWeight" name="rate[max_range_lbs]" step="0.1" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="5.0" required>
        </div>

        <div>
          <label for="rateFlatRate" class="block text-sm font-medium text-gray-700 mb-1">Flat Rate ($)</label>
          <input type="number" id="rateFlatRate" name="rate[flat_rate]" step="0.01" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="20.00" required>
        </div>

        <div>
          <label for="rateMinCharge" class="block text-sm font-medium text-gray-700 mb-1">Minimum Charge ($)</label>
          <input type="number" id="rateMinCharge" name="rate[min_charge]" step="0.01" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="10.00" required>
        </div>

        <div class="flex justify-end space-x-3 pt-4">
          <button type="button" id="cancelRateBtn" class="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-md">
            Cancel
          </button>
          <button type="submit" class="px-4 py-2 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 rounded-md">
            Create Rate Table
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<div id="editRateModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50" data-turbo-permanent>
  <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
    <div class="mt-3">
      <div class="flex items-center justify-between mb-4">
        <h3 class="text-lg font-medium text-gray-900">Edit Rate Table</h3>
        <button id="closeEditRateModal" class="text-gray-400 hover:text-gray-600">
          <i class="fa-solid fa-times text-xl"></i>
        </button>
      </div>
      
      <form id="editRateForm" class="space-y-4">
        <input type="hidden" id="editRateId" name="rate[id]">
        

        <div>
          <label for="editRateCountry" class="block text-sm font-medium text-gray-700 mb-1">Country</label>
          <select id="editRateCountry" name="rate[country]" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" required>
            <option value="">Select a country...</option>
          </select>
        </div>

        <div>
          <label for="editRateRegion" class="block text-sm font-medium text-gray-700 mb-1">Region</label>
          <select id="editRateRegion" name="rate[region]" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
            <option value="">Select a region...</option>
          </select>
        </div>

        <div>
          <label for="editRateMinWeight" class="block text-sm font-medium text-gray-700 mb-1">Minimum Weight (lbs)</label>
          <input type="number" id="editRateMinWeight" name="rate[min_range_lbs]" step="0.1" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="0.1" required>
        </div>

        <div>
          <label for="editRateMaxWeight" class="block text-sm font-medium text-gray-700 mb-1">Maximum Weight (lbs)</label>
          <input type="number" id="editRateMaxWeight" name="rate[max_range_lbs]" step="0.1" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="5.0" required>
        </div>

        <div>
          <label for="editRateFlatRate" class="block text-sm font-medium text-gray-700 mb-1">Flat Rate ($)</label>
          <input type="number" id="editRateFlatRate" name="rate[flat_rate]" step="0.01" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="20.00" required>
        </div>

        <div>
          <label for="editRateMinCharge" class="block text-sm font-medium text-gray-700 mb-1">Minimum Charge ($)</label>
          <input type="number" id="editRateMinCharge" name="rate[min_charge]" step="0.01" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="10.00" required>
        </div>

        <div class="flex justify-end space-x-3 pt-4">
          <button type="button" id="cancelEditRateBtn" class="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-md">
            Cancel
          </button>
          <button type="submit" class="px-4 py-2 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 rounded-md">
            Update Rate Table
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
let countryChoices, regionChoices, editCountryChoices, editRegionChoices;

function initializeRateTableModals() {
  initializeChoices();
  loadCountriesData();
  setTimeout(() => {
    if (countryChoices && regionChoices) {
      console.log('Choices instances are ready');
      loadRegionsForCountry('US', regionChoices);
    } else {
      console.error('Choices instances not ready!');
    }

    const rateCountryEl = document.getElementById('rateCountry');
    const rateRegionEl = document.getElementById('rateRegion');
  }, 2000);

  const addRateBtn = document.getElementById('addRateBtn');
  const addRateBtnEmpty = document.getElementById('addRateBtnEmpty');
  const addRateModal = document.getElementById('addRateModal');
  const closeRateModal = document.getElementById('closeRateModal');
  const cancelRateBtn = document.getElementById('cancelRateBtn');
  const addRateForm = document.getElementById('addRateForm');

  const editRateModal = document.getElementById('editRateModal');
  const closeEditRateModal = document.getElementById('closeEditRateModal');
  const cancelEditRateBtn = document.getElementById('cancelEditRateBtn');
  const editRateForm = document.getElementById('editRateForm');

  function openAddModal() {
    if (addRateModal) {
      addRateModal.classList.remove('hidden');

      setTimeout(() => {
        const rateCountryEl = document.getElementById('rateCountry');
        const rateRegionEl = document.getElementById('rateRegion');
      }, 100);
    }
  }

  function closeAddModal() {
    if (addRateModal) {
      addRateModal.classList.add('hidden');
      addRateForm.reset();
      try {
        if (countryChoices) countryChoices.setChoiceByValue('');
        if (regionChoices) regionChoices.setChoiceByValue('');
      } catch (e) {
        console.log('Error resetting choices:', e);
      }
    }
  }

  function openEditModal(rateData) {
    if (editRateModal) {
      document.getElementById('editRateId').value = rateData.rateId;

      if (editCountryChoices) {
        editCountryChoices.setChoiceByValue(rateData.country);
        loadRegionsForCountry(rateData.country, editRegionChoices);
      }
      if (editRegionChoices) {
        editRegionChoices.setChoiceByValue(rateData.region || '');
      }

      document.getElementById('editRateMinWeight').value = rateData.minWeight;
      document.getElementById('editRateMaxWeight').value = rateData.maxWeight;
      document.getElementById('editRateFlatRate').value = rateData.flatRate;
      document.getElementById('editRateMinCharge').value = rateData.minCharge;
      
      editRateModal.classList.remove('hidden');
    }
  }

  function closeEditModal() {
    if (editRateModal) {
      editRateModal.classList.add('hidden');
      editRateForm.reset();
      try {
        if (editCountryChoices) editCountryChoices.setChoiceByValue('');
        if (editRegionChoices) editRegionChoices.setChoiceByValue('');
      } catch (e) {
        console.log('Error resetting edit choices:', e);
      }
    }
  }

  if (addRateBtn) {
    addRateBtn.addEventListener('click', openAddModal);
  }
  
  if (addRateBtnEmpty) {
    addRateBtnEmpty.addEventListener('click', openAddModal);
  }

  if (closeRateModal) {
    closeRateModal.addEventListener('click', closeAddModal);
  }

  if (cancelRateBtn) {
    cancelRateBtn.addEventListener('click', closeAddModal);
  }

  if (closeEditRateModal) {
    closeEditRateModal.addEventListener('click', closeEditModal);
  }

  if (cancelEditRateBtn) {
    cancelEditRateBtn.addEventListener('click', closeEditModal);
  }

  document.addEventListener('click', function(e) {
    if (e.target.classList.contains('edit-rate-btn')) {
      e.preventDefault();
      
      const rateData = {
        rateId: e.target.dataset.rateId,
        shippingOptionId: e.target.dataset.shippingOptionId,
        country: e.target.dataset.rateCountry,
        region: e.target.dataset.rateRegion,
        minWeight: e.target.dataset.rateMinWeight,
        maxWeight: e.target.dataset.rateMaxWeight,
        flatRate: e.target.dataset.rateFlatRate,
        minCharge: e.target.dataset.rateMinCharge
      };
      openEditModal(rateData);
    }
  });

  document.addEventListener('click', function(e) {
    if (e.target.classList.contains('delete-rate-btn')) {
      e.preventDefault();

      const rateId = e.target.dataset.rateId;
      const country = e.target.dataset.rateCountry;
      const region = e.target.dataset.rateRegion;
      const shippingOptionName = e.target.dataset.shippingOptionName;
      const deleteUrl = e.target.dataset.deleteUrl;

      const regionText = region ? ` (${region})` : '';
      const confirmMessage = `Are you sure you want to delete this rate table?\n\nShipping Method: ${shippingOptionName}\nCountry: ${country}${regionText}`;
      
      if (confirm(confirmMessage)) {
        deleteRate(deleteUrl);
      }
    }
  });

  if (addRateModal) {
    addRateModal.addEventListener('click', function(e) {
      if (e.target === addRateModal) {
        closeAddModal();
      }
    });
  }

  if (editRateModal) {
    editRateModal.addEventListener('click', function(e) {
      if (e.target === editRateModal) {
        closeEditModal();
      }
    });
  }


  if (addRateForm) {
    addRateForm.addEventListener('submit', function(e) {
      e.preventDefault();

      clearFormErrors();

      const formData = new FormData(addRateForm);
      const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

      const submitBtn = addRateForm.querySelector('button[type="submit"]');
      const originalText = submitBtn.textContent;
      submitBtn.textContent = 'Creating...';
      submitBtn.disabled = true;
      
      fetch('/rates', {
        method: 'POST',
        body: formData,
        headers: {
          'X-CSRF-Token': csrfToken,
          'X-Requested-With': 'XMLHttpRequest'
        }
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          closeAddModal();
          Turbo.visit(window.location.href, { action: 'replace' });
        } else {
          showFormErrors(data.errors);
        }
      })
      .catch(error => {
        console.error('Error:', error);
        showFormErrors(['An unexpected error occurred. Please try again.']);
      })
      .finally(() => {
        submitBtn.textContent = originalText;
        submitBtn.disabled = false;
      });
    });
  }
  
  function clearFormErrors() {
    const errorContainer = document.getElementById('addRateErrors');
    if (errorContainer) {
      errorContainer.remove();
    }
  }

  function showFormErrors(errors) {
    clearFormErrors();

    const errorHtml = `
      <div id="addRateErrors" class="bg-red-50 border border-red-200 rounded-xl p-4 mb-4">
        <div class="flex">
          <div class="flex-shrink-0">
            <i class="fa-solid fa-exclamation-triangle text-red-400"></i>
          </div>
          <div class="ml-3">
            <h3 class="text-sm font-medium text-red-800">
              ${errors.length} error${errors.length > 1 ? 's' : ''} prohibited this rate from being saved:
            </h3>
            <div class="mt-2 text-sm text-red-700">
              <ul class="list-disc list-inside space-y-1">
                ${errors.map(error => `<li>${error}</li>`).join('')}
              </ul>
            </div>
          </div>
        </div>
      </div>
    `;

    addRateForm.insertAdjacentHTML('afterbegin', errorHtml);
  }

  if (editRateForm) {
    editRateForm.addEventListener('submit', function(e) {
      e.preventDefault();

      const formData = new FormData(editRateForm);
      const rateId = formData.get('rate[id]');

      const updateUrl = `${window.location.origin}/rates/${rateId}`;

      editRateForm.action = updateUrl;
      editRateForm.method = 'post';

      const methodField = document.createElement('input');
      methodField.type = 'hidden';
      methodField.name = '_method';
      methodField.value = 'patch';
      editRateForm.appendChild(methodField);

      const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
      const csrfField = document.createElement('input');
      csrfField.type = 'hidden';
      csrfField.name = 'authenticity_token';
      csrfField.value = csrfToken;
      editRateForm.appendChild(csrfField);
      
      editRateForm.submit();
    });
  }

  function deleteRate(deleteUrl) {
    const form = document.createElement('form');
    form.method = 'post';
    form.action = deleteUrl;

    const methodField = document.createElement('input');
    methodField.type = 'hidden';
    methodField.name = '_method';
    methodField.value = 'delete';
    form.appendChild(methodField);

    const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
    const csrfField = document.createElement('input');
    csrfField.type = 'hidden';
    csrfField.name = 'authenticity_token';
    csrfField.value = csrfToken;
    form.appendChild(csrfField);

    document.body.appendChild(form);
    form.submit();
  }
}

function cleanupChoices() {
  if (countryChoices) {
    try {
      countryChoices.destroy();
    } catch (e) {
      console.log('Error destroying countryChoices:', e);
    }
    countryChoices = null;
  }
  
  if (regionChoices) {
    try {
      regionChoices.destroy();
    } catch (e) {
      console.log('Error destroying regionChoices:', e);
    }
    regionChoices = null;
  }
  
  if (editCountryChoices) {
    try {
      editCountryChoices.destroy();
    } catch (e) {
      console.log('Error destroying editCountryChoices:', e);
    }
    editCountryChoices = null;
  }
  
  if (editRegionChoices) {
    try {
      editRegionChoices.destroy();
    } catch (e) {
      console.log('Error destroying editRegionChoices:', e);
    }
    editRegionChoices = null;
  }
  
  const elements = ['rateCountry', 'rateRegion', 'editRateCountry', 'editRateRegion'];
  elements.forEach(id => {
    const el = document.getElementById(id);
    if (el) {
      el.removeAttribute('data-choices-initialized');
    }
  });
}

function initializeChoices() {
  cleanupChoices();
  
  const rateCountryEl = document.getElementById('rateCountry');
  if (rateCountryEl && !rateCountryEl.hasAttribute('data-choices-initialized')) {
    countryChoices = new Choices('#rateCountry', {
      searchEnabled: true,
      placeholder: true,
      placeholderValue: 'Select a country...',
      searchPlaceholderValue: 'Search countries...',
      noResultsText: 'No countries found',
      noChoicesText: 'No countries available',
      itemSelectText: 'Press to select',
      shouldSort: false
    });
    rateCountryEl.setAttribute('data-choices-initialized', 'true');
  }

  const rateRegionEl = document.getElementById('rateRegion');
  if (rateRegionEl && !rateRegionEl.hasAttribute('data-choices-initialized')) {
    regionChoices = new Choices('#rateRegion', {
      searchEnabled: true,
      placeholder: true,
      placeholderValue: 'Select a region...',
      searchPlaceholderValue: 'Search regions...',
      noResultsText: 'No regions found',
      noChoicesText: 'No regions available',
      itemSelectText: 'Press to select',
      shouldSort: false
    });
    rateRegionEl.setAttribute('data-choices-initialized', 'true');
  }

  const editRateCountryEl = document.getElementById('editRateCountry');
  if (editRateCountryEl && !editRateCountryEl.hasAttribute('data-choices-initialized')) {
    editCountryChoices = new Choices('#editRateCountry', {
      searchEnabled: true,
      placeholder: true,
      placeholderValue: 'Select a country...',
      searchPlaceholderValue: 'Search countries...',
      noResultsText: 'No countries found',
      noChoicesText: 'No countries available',
      itemSelectText: 'Press to select',
      shouldSort: false
    });
    editRateCountryEl.setAttribute('data-choices-initialized', 'true');
  }

  const editRateRegionEl = document.getElementById('editRateRegion');
  if (editRateRegionEl && !editRateRegionEl.hasAttribute('data-choices-initialized')) {
    editRegionChoices = new Choices('#editRateRegion', {
      searchEnabled: true,
      placeholder: true,
      placeholderValue: 'Select a region...',
      searchPlaceholderValue: 'Search regions...',
      noResultsText: 'No regions found',
      noChoicesText: 'No regions available',
      itemSelectText: 'Press to select',
      shouldSort: false
    });
    editRateRegionEl.setAttribute('data-choices-initialized', 'true');
  }

  if (countryChoices) {
    countryChoices.passedElement.element.addEventListener('choice', (event) => {
      console.log('Country choice event triggered:', event.detail);
      const selectedValue = event.detail.choice.value;
      if (selectedValue) {
        loadRegionsForCountry(selectedValue, regionChoices);
      }
    });
  }

  if (editCountryChoices) {
    editCountryChoices.passedElement.element.addEventListener('choice', (event) => {
      console.log('Edit country choice event triggered:', event.detail);
      const selectedValue = event.detail.choice.value;
      if (selectedValue) {
        loadRegionsForCountry(selectedValue, editRegionChoices);
      }
    });
  }

  if (rateCountryEl) {
    rateCountryEl.addEventListener('change', (event) => {
      console.log('Direct country change event:', event.target.value);
      if (event.target.value && regionChoices) {
        loadRegionsForCountry(event.target.value, regionChoices);
      }
    });
  }
  
  if (editRateCountryEl) {
    editRateCountryEl.addEventListener('change', (event) => {
      console.log('Direct edit country change event:', event.target.value);
      if (event.target.value && editRegionChoices) {
        loadRegionsForCountry(event.target.value, editRegionChoices);
      }
    });
  }
}

async function loadCountriesData() {
  try {
    const response = await fetch('https://restcountries.com/v3.1/all?fields=name,cca2');
    const countries = await response.json();
    
    const countryOptions = countries.map(country => ({
      value: country.cca2,
      label: `${country.name.common} (${country.cca2})`
    }));
    
    countryOptions.sort((a, b) => a.label.localeCompare(b.label));
    
    if (countryChoices) {
      countryChoices.setChoices(countryOptions, 'value', 'label', true);
    }
    if (editCountryChoices) {
      editCountryChoices.setChoices(countryOptions, 'value', 'label', true);
    }
    
  } catch (error) {
    console.error('Error loading countries:', error);
    loadFallbackCountries();
  }
}

function loadFallbackCountries() {
  const commonCountries = [
    { value: 'US', label: 'United States (US)' },
    { value: 'CA', label: 'Canada (CA)' },
    { value: 'MX', label: 'Mexico (MX)' },
    { value: 'GB', label: 'United Kingdom (GB)' },
    { value: 'AU', label: 'Australia (AU)' },
    { value: 'DE', label: 'Germany (DE)' },
    { value: 'FR', label: 'France (FR)' },
    { value: 'IT', label: 'Italy (IT)' },
    { value: 'ES', label: 'Spain (ES)' },
    { value: 'BR', label: 'Brazil (BR)' },
    { value: 'AR', label: 'Argentina (AR)' },
    { value: 'CL', label: 'Chile (CL)' },
    { value: 'CO', label: 'Colombia (CO)' },
    { value: 'PE', label: 'Peru (PE)' },
    { value: 'JP', label: 'Japan (JP)' },
    { value: 'CN', label: 'China (CN)' },
    { value: 'IN', label: 'India (IN)' },
    { value: 'KR', label: 'South Korea (KR)' },
    { value: 'SG', label: 'Singapore (SG)' },
    { value: 'NL', label: 'Netherlands (NL)' }
  ];
  
  if (countryChoices) {
    countryChoices.setChoices(commonCountries, 'value', 'label', true);
  }
  if (editCountryChoices) {
    editCountryChoices.setChoices(commonCountries, 'value', 'label', true);
  }
}

async function loadRegionsForCountry(countryCode, regionChoicesInstance) {
  console.log('Loading regions for country:', countryCode);
  console.log('Region choices instance:', regionChoicesInstance);
  
  const regions = await getRegionsForCountry(countryCode);
  console.log('Found regions:', regions);
  
  if (regions.length === 0) {
    console.log('No regions found, setting empty option');
    regionChoicesInstance.setChoices([{ value: '', label: 'No regions available' }], 'value', 'label', true);
    return;
  }
  
  const regionOptions = regions.map(region => ({
    label: region.name
  }));
  
  console.log('Setting region options:', regionOptions);
  
  regionChoicesInstance.clearChoices();
  regionChoicesInstance.setChoices(regionOptions, 'value', 'label', true);
  
  console.log('Region choices updated successfully');
}

async function getRegionsForCountry(countryCode) {
  const localRegions = getLocalRegionsForCountry(countryCode);
  if (localRegions.length > 0) {
    return localRegions;
  }
  
  try {
    console.log('Fetching regions from API for:', countryCode);
    const response = await fetch(`https://restcountries.com/v3.1/alpha/${countryCode}?fields=subregion,region`);
    const countryData = await response.json();
    
    if (countryData.subregion) {
      return [{ name: countryData.subregion, code: countryData.subregion }];
    } else if (countryData.region) {
      return [{ name: countryData.region, code: countryData.region }];
    }
  } catch (error) {
    console.error('Error fetching regions from API:', error);
  }
  
  return [];
}

function getLocalRegionsForCountry(countryCode) {
  const regionMap = {
    'US': [
      { name: 'Alabama', code: 'AL' }, { name: 'Alaska', code: 'AK' }, { name: 'Arizona', code: 'AZ' },
      { name: 'Arkansas', code: 'AR' }, { name: 'California', code: 'CA' }, { name: 'Colorado', code: 'CO' },
      { name: 'Connecticut', code: 'CT' }, { name: 'Delaware', code: 'DE' }, { name: 'Florida', code: 'FL' },
      { name: 'Georgia', code: 'GA' }, { name: 'Hawaii', code: 'HI' }, { name: 'Idaho', code: 'ID' },
      { name: 'Illinois', code: 'IL' }, { name: 'Indiana', code: 'IN' }, { name: 'Iowa', code: 'IA' },
      { name: 'Kansas', code: 'KS' }, { name: 'Kentucky', code: 'KY' }, { name: 'Louisiana', code: 'LA' },
      { name: 'Maine', code: 'ME' }, { name: 'Maryland', code: 'MD' }, { name: 'Massachusetts', code: 'MA' },
      { name: 'Michigan', code: 'MI' }, { name: 'Minnesota', code: 'MN' }, { name: 'Mississippi', code: 'MS' },
      { name: 'Missouri', code: 'MO' }, { name: 'Montana', code: 'MT' }, { name: 'Nebraska', code: 'NE' },
      { name: 'Nevada', code: 'NV' }, { name: 'New Hampshire', code: 'NH' }, { name: 'New Jersey', code: 'NJ' },
      { name: 'New Mexico', code: 'NM' }, { name: 'New York', code: 'NY' }, { name: 'North Carolina', code: 'NC' },
      { name: 'North Dakota', code: 'ND' }, { name: 'Ohio', code: 'OH' }, { name: 'Oklahoma', code: 'OK' },
      { name: 'Oregon', code: 'OR' }, { name: 'Pennsylvania', code: 'PA' }, { name: 'Rhode Island', code: 'RI' },
      { name: 'South Carolina', code: 'SC' }, { name: 'South Dakota', code: 'SD' }, { name: 'Tennessee', code: 'TN' },
      { name: 'Texas', code: 'TX' }, { name: 'Utah', code: 'UT' }, { name: 'Vermont', code: 'VT' },
      { name: 'Virginia', code: 'VA' }, { name: 'Washington', code: 'WA' }, { name: 'West Virginia', code: 'WV' },
      { name: 'Wisconsin', code: 'WI' }, { name: 'Wyoming', code: 'WY' }
    ],
    'CA': [
      { name: 'Alberta', code: 'AB' }, { name: 'British Columbia', code: 'BC' }, { name: 'Manitoba', code: 'MB' },
      { name: 'New Brunswick', code: 'NB' }, { name: 'Newfoundland and Labrador', code: 'NL' },
      { name: 'Northwest Territories', code: 'NT' }, { name: 'Nova Scotia', code: 'NS' }, { name: 'Nunavut', code: 'NU' },
      { name: 'Ontario', code: 'ON' }, { name: 'Prince Edward Island', code: 'PE' }, { name: 'Quebec', code: 'QC' },
      { name: 'Saskatchewan', code: 'SK' }, { name: 'Yukon', code: 'YT' }
    ],
    'MX': [
      { name: 'Aguascalientes', code: 'AGU' }, { name: 'Baja California', code: 'BCN' },
      { name: 'Baja California Sur', code: 'BCS' }, { name: 'Campeche', code: 'CAM' },
      { name: 'Chiapas', code: 'CHP' }, { name: 'Chihuahua', code: 'CHH' }, { name: 'Coahuila', code: 'COA' },
      { name: 'Colima', code: 'COL' }, { name: 'Durango', code: 'DUR' }, { name: 'Guanajuato', code: 'GUA' },
      { name: 'Guerrero', code: 'GRO' }, { name: 'Hidalgo', code: 'HID' }, { name: 'Jalisco', code: 'JAL' },
      { name: 'México', code: 'MEX' }, { name: 'Michoacán', code: 'MIC' }, { name: 'Morelos', code: 'MOR' },
      { name: 'Nayarit', code: 'NAY' }, { name: 'Nuevo León', code: 'NLE' }, { name: 'Oaxaca', code: 'OAX' },
      { name: 'Puebla', code: 'PUE' }, { name: 'Querétaro', code: 'QUE' }, { name: 'Quintana Roo', code: 'ROO' },
      { name: 'San Luis Potosí', code: 'SLP' }, { name: 'Sinaloa', code: 'SIN' }, { name: 'Sonora', code: 'SON' },
      { name: 'Tabasco', code: 'TAB' }, { name: 'Tamaulipas', code: 'TAM' }, { name: 'Tlaxcala', code: 'TLA' },
      { name: 'Veracruz', code: 'VER' }, { name: 'Yucatán', code: 'YUC' }, { name: 'Zacatecas', code: 'ZAC' }
    ],
    'GB': [
      { name: 'England', code: 'ENG' }, { name: 'Scotland', code: 'SCT' },
      { name: 'Wales', code: 'WLS' }, { name: 'Northern Ireland', code: 'NIR' }
    ],
    'AU': [
      { name: 'New South Wales', code: 'NSW' }, { name: 'Victoria', code: 'VIC' },
      { name: 'Queensland', code: 'QLD' }, { name: 'Western Australia', code: 'WA' },
      { name: 'South Australia', code: 'SA' }, { name: 'Tasmania', code: 'TAS' },
      { name: 'Australian Capital Territory', code: 'ACT' }, { name: 'Northern Territory', code: 'NT' }
    ],
    'DE': [
      { name: 'Baden-Württemberg', code: 'BW' }, { name: 'Bavaria', code: 'BY' }, { name: 'Berlin', code: 'BE' },
      { name: 'Brandenburg', code: 'BB' }, { name: 'Bremen', code: 'HB' }, { name: 'Hamburg', code: 'HH' },
      { name: 'Hesse', code: 'HE' }, { name: 'Mecklenburg-Vorpommern', code: 'MV' }, { name: 'Lower Saxony', code: 'NI' },
      { name: 'North Rhine-Westphalia', code: 'NW' }, { name: 'Rhineland-Palatinate', code: 'RP' },
      { name: 'Saarland', code: 'SL' }, { name: 'Saxony', code: 'SN' }, { name: 'Saxony-Anhalt', code: 'ST' },
      { name: 'Schleswig-Holstein', code: 'SH' }, { name: 'Thuringia', code: 'TH' }
    ],
    'FR': [
      { name: 'Auvergne-Rhône-Alpes', code: 'ARA' }, { name: 'Bourgogne-Franche-Comté', code: 'BFC' },
      { name: 'Brittany', code: 'BRE' }, { name: 'Centre-Val de Loire', code: 'CVL' },
      { name: 'Corsica', code: 'COR' }, { name: 'Grand Est', code: 'GES' }, { name: 'Hauts-de-France', code: 'HDF' },
      { name: 'Île-de-France', code: 'IDF' }, { name: 'Normandy', code: 'NOR' }, { name: 'Nouvelle-Aquitaine', code: 'NAQ' },
      { name: 'Occitanie', code: 'OCC' }, { name: 'Pays de la Loire', code: 'PDL' },
      { name: "Provence-Alpes-Côte d'Azur", code: 'PAC' }
    ],
    'IT': [
      { name: 'Abruzzo', code: 'ABR' }, { name: 'Basilicata', code: 'BAS' }, { name: 'Calabria', code: 'CAL' },
      { name: 'Campania', code: 'CAM' }, { name: 'Emilia-Romagna', code: 'EMR' }, { name: 'Friuli-Venezia Giulia', code: 'FVG' },
      { name: 'Lazio', code: 'LAZ' }, { name: 'Liguria', code: 'LIG' }, { name: 'Lombardy', code: 'LOM' },
      { name: 'Marche', code: 'MAR' }, { name: 'Molise', code: 'MOL' }, { name: 'Piedmont', code: 'PIE' },
      { name: 'Apulia', code: 'PUG' }, { name: 'Sardinia', code: 'SAR' }, { name: 'Sicily', code: 'SIC' },
      { name: 'Tuscany', code: 'TOS' }, { name: 'Trentino-Alto Adige', code: 'TAA' }, { name: 'Umbria', code: 'UMB' },
      { name: 'Aosta Valley', code: 'VDA' }, { name: 'Veneto', code: 'VEN' }
    ],
    'ES': [
      { name: 'Andalusia', code: 'AN' }, { name: 'Aragon', code: 'AR' }, { name: 'Asturias', code: 'AS' },
      { name: 'Balearic Islands', code: 'IB' }, { name: 'Canary Islands', code: 'CN' }, { name: 'Cantabria', code: 'CB' },
      { name: 'Castile and León', code: 'CL' }, { name: 'Castilla-La Mancha', code: 'CM' }, { name: 'Catalonia', code: 'CT' },
      { name: 'Extremadura', code: 'EX' }, { name: 'Galicia', code: 'GA' }, { name: 'La Rioja', code: 'RI' },
      { name: 'Madrid', code: 'MD' }, { name: 'Murcia', code: 'MC' }, { name: 'Navarre', code: 'NC' },
      { name: 'Basque Country', code: 'PV' }, { name: 'Valencian Community', code: 'VC' }
    ],
    'BR': [
      { name: 'Acre', code: 'AC' }, { name: 'Alagoas', code: 'AL' }, { name: 'Amapá', code: 'AP' },
      { name: 'Amazonas', code: 'AM' }, { name: 'Bahia', code: 'BA' }, { name: 'Ceará', code: 'CE' },
      { name: 'Distrito Federal', code: 'DF' }, { name: 'Espírito Santo', code: 'ES' }, { name: 'Goiás', code: 'GO' },
      { name: 'Maranhão', code: 'MA' }, { name: 'Mato Grosso', code: 'MT' }, { name: 'Mato Grosso do Sul', code: 'MS' },
      { name: 'Minas Gerais', code: 'MG' }, { name: 'Pará', code: 'PA' }, { name: 'Paraíba', code: 'PB' },
      { name: 'Paraná', code: 'PR' }, { name: 'Pernambuco', code: 'PE' }, { name: 'Piauí', code: 'PI' },
      { name: 'Rio de Janeiro', code: 'RJ' }, { name: 'Rio Grande do Norte', code: 'RN' },
      { name: 'Rio Grande do Sul', code: 'RS' }, { name: 'Rondônia', code: 'RO' }, { name: 'Roraima', code: 'RR' },
      { name: 'Santa Catarina', code: 'SC' }, { name: 'São Paulo', code: 'SP' }, { name: 'Sergipe', code: 'SE' },
      { name: 'Tocantins', code: 'TO' }
    ],
    'AR': [
      { name: 'Buenos Aires', code: 'BA' }, { name: 'Catamarca', code: 'CT' }, { name: 'Chaco', code: 'CC' },
      { name: 'Chubut', code: 'CH' }, { name: 'Córdoba', code: 'CB' }, { name: 'Corrientes', code: 'CR' },
      { name: 'Entre Ríos', code: 'ER' }, { name: 'Formosa', code: 'FM' }, { name: 'Jujuy', code: 'JY' },
      { name: 'La Pampa', code: 'LP' }, { name: 'La Rioja', code: 'LR' }, { name: 'Mendoza', code: 'MZ' },
      { name: 'Misiones', code: 'MN' }, { name: 'Neuquén', code: 'NQ' }, { name: 'Río Negro', code: 'RN' },
      { name: 'Salta', code: 'SA' }, { name: 'San Juan', code: 'SJ' }, { name: 'San Luis', code: 'SL' },
      { name: 'Santa Cruz', code: 'SC' }, { name: 'Santa Fe', code: 'SF' }, { name: 'Santiago del Estero', code: 'SE' },
      { name: 'Tierra del Fuego', code: 'TF' }, { name: 'Tucumán', code: 'TM' }
    ],
    'CL': [
      { name: 'Arica y Parinacota', code: 'AP' }, { name: 'Tarapacá', code: 'TA' }, { name: 'Antofagasta', code: 'AN' },
      { name: 'Atacama', code: 'AT' }, { name: 'Coquimbo', code: 'CO' }, { name: 'Valparaíso', code: 'VS' },
      { name: 'Metropolitana', code: 'RM' }, { name: "O'Higgins", code: 'LI' }, { name: 'Maule', code: 'ML' },
      { name: 'Ñuble', code: 'NB' }, { name: 'Biobío', code: 'BI' }, { name: 'La Araucanía', code: 'AR' },
      { name: 'Los Ríos', code: 'LR' }, { name: 'Los Lagos', code: 'LL' }, { name: 'Aysén', code: 'AI' },
      { name: 'Magallanes', code: 'MA' }
    ]
  };

  return regionMap[countryCode] || [];
}

if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initializeRateTableModals);
} else {
  initializeRateTableModals();
}

document.addEventListener('turbo:load', initializeRateTableModals);
document.addEventListener('turbo:render', initializeRateTableModals);

document.addEventListener('turbo:before-cache', cleanupChoices);
document.addEventListener('turbo:before-render', cleanupChoices);
</script>