<div class="bg-white rounded-2xl shadow-sm border border-gray-100 p-2 mb-8">
  <nav class="flex space-x-1" id="shipping-nav-tabs">
    <% 
      is_overview = controller_name == 'shipping_options' && action_name == 'index'
      is_shipping_methods = controller_name == 'shipping_options' && action_name == 'shipping_methods'
      is_rate_tables = controller_name == 'rates' && action_name == 'index' && !params[:shipping_option_id]
    %>
    
    <%= link_to shipping_options_path, 
        class: "nav-tab flex items-center px-6 py-3 text-sm font-medium rounded-xl #{'bg-blue-50 text-blue-700 border border-blue-200' if is_overview} #{'text-gray-600 hover:text-gray-900 hover:bg-gray-50 transition-colors duration-200' unless is_overview}",
        data: { turbo_frame: "shipping_content", tab: "overview" } do %>
      <i class="fa-solid fa-grid-3 mr-2"></i>
      Overview
    <% end %>
    
    <%= link_to shipping_methods_shipping_options_path, 
        class: "nav-tab flex items-center px-6 py-3 text-sm font-medium rounded-xl #{'bg-blue-50 text-blue-700 border border-blue-200' if is_shipping_methods} #{'text-gray-600 hover:text-gray-900 hover:bg-gray-50 transition-colors duration-200' unless is_shipping_methods}",
        data: { turbo_frame: "shipping_content", tab: "shipping_methods" } do %>
      <i class="fa-solid fa-list mr-2"></i>
      Shipping Methods
    <% end %>
    
    <%= link_to rate_tables_path, 
        class: "nav-tab flex items-center px-6 py-3 text-sm font-medium rounded-xl #{'bg-blue-50 text-blue-700 border border-blue-200' if is_rate_tables} #{'text-gray-600 hover:text-gray-900 hover:bg-gray-50 transition-colors duration-200' unless is_rate_tables}",
        data: { turbo_frame: "shipping_content", tab: "rate_tables" } do %>
      <i class="fa-solid fa-arrows-up-down mr-2"></i>
      Rate Tables
    <% end %>
  </nav>
</div>

<script>
// Handle tab navigation and active states
function initializeNavigation() {
  
  // Function to update active tab
  function updateActiveTab(activeTab) {
    // Remove active class from all tabs
    document.querySelectorAll('.nav-tab').forEach(tab => {
      tab.classList.remove('bg-blue-50', 'text-blue-700', 'border', 'border-blue-200');
      tab.classList.add('text-gray-600', 'hover:text-gray-900', 'hover:bg-gray-50');
    });
    
    // Add active class to the clicked tab
    const activeTabElement = document.querySelector(`[data-tab="${activeTab}"]`);
    if (activeTabElement) {
      activeTabElement.classList.remove('text-gray-600', 'hover:text-gray-900', 'hover:bg-gray-50');
      activeTabElement.classList.add('bg-blue-50', 'text-blue-700', 'border', 'border-blue-200');
    }
  }

  function clearAllActiveTabs() {
    // Remove active class from all tabs
    document.querySelectorAll('.nav-tab').forEach(tab => {
      tab.classList.remove('bg-blue-50', 'text-blue-700', 'border', 'border-blue-200');
      tab.classList.add('text-gray-600', 'hover:text-gray-900', 'hover:bg-gray-50');
    });
  }
  
  // Store the currently active tab
  let currentActiveTab = 'overview'; // Default to overview
  
  // Add click listeners to tabs
  document.querySelectorAll('.nav-tab').forEach(tab => {
    // Remove existing listeners to prevent duplicates
    tab.removeEventListener('click', handleTabClick);
    tab.addEventListener('click', handleTabClick);
  });
  
  function handleTabClick(e) {
    const tabName = this.getAttribute('data-tab');
    currentActiveTab = tabName; // Store the clicked tab
    updateActiveTab(tabName);
  }
  
  // Function to determine active tab based on current content
  function determineActiveTabFromContent() {
    const currentPath = window.location.pathname;
    
    // Check if we're on new/edit pages
    if (currentPath.includes('/new') || currentPath.includes('/edit')) {
      return null; // Don't mark any tab as active on new/edit pages
    }
    
    // Check the content of the shipping_content frame
    const shippingContent = document.getElementById('shipping_content');
    if (shippingContent) {
      const contentText = shippingContent.textContent || shippingContent.innerText;
      
      // More specific detection based on actual content - check Overview first
      if (contentText.includes('Shipping Overview') || contentText.includes('Monitor your shipping') || contentText.includes('Active Methods') || contentText.includes('Configured Regions')) {
        return 'overview';
      } else if (contentText.includes('Rate Tables') || contentText.includes('rate table') || contentText.includes('Add Rate Table')) {
        return 'rate_tables';
      } else if (contentText.includes('Shipping Methods') || contentText.includes('shipping method') || contentText.includes('Add Method') || contentText.includes('Express shipping') || contentText.includes('Normal Shipping')) {
        return 'shipping_methods';
      }
    }
    
    // Fallback to URL-based detection
    if (currentPath.includes('/rates') || currentPath.includes('/rate_tables')) {
      return 'rate_tables';
    } else if (currentPath.includes('/shipping_options')) {
      return 'shipping_methods';
    } else {
      return 'overview';
    }
  }

  // Listen for turbo frame loads to update active state
  document.addEventListener('turbo:frame-load', function(e) {
    if (e.target.id === 'shipping_content') {
      // Add a small delay to ensure content is fully loaded
      setTimeout(() => {
        const activeTab = determineActiveTabFromContent();
        
        if (activeTab === null) {
          clearAllActiveTabs();
        } else {
          currentActiveTab = activeTab; // Update stored tab
          updateActiveTab(activeTab);
        }
      }, 100);
    }
  });
  
  // Also listen for turbo:load events
  document.addEventListener('turbo:load', function() {
    // Add a small delay to ensure content is fully loaded
    setTimeout(() => {
      const activeTab = determineActiveTabFromContent();
      
      if (activeTab === null) {
        clearAllActiveTabs();
      } else {
        currentActiveTab = activeTab; // Update stored tab
        updateActiveTab(activeTab);
      }
    }, 100);
  });
}

// Initialize on DOM ready
document.addEventListener('DOMContentLoaded', initializeNavigation);

// Also initialize on turbo events
document.addEventListener('turbo:load', initializeNavigation);
document.addEventListener('turbo:render', initializeNavigation);
</script>
